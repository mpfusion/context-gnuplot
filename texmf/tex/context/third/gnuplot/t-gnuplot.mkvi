%D \module
%D   [       file=t-gnuplot,
%D        version=2013.04.28,
%D          title=\CONTEXT\ Extra Modules,
%D       subtitle=\GNUPLOT\ Inclusion,
%D         author={Hans Hagen, Taco Hoekwater, Mojca Miklavec, (Aditya Mahajan), Marco Patzer},
%D           date=\currentdate,
%D      copyright=\PRAGMA]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

% begin info
%
% title   : Gnuplot module
%
% comment : simplifies inclusion of gnuplot-generated graphs into ConTeXt documents
% status  : alpha, supports MKIV
%
% end info

%M \setuphead [subject] [page=no]
%M \small

\writestatus{loading}{Gnuplot (ver: 2013.04.28)}

\startmodule [gnuplot]

\usemodule [filter]

\unprotect

%D \startsubject [title=Interface]

\startinterface all
	\setinterfaceconstant {terminal}  {terminal}
	\setinterfaceconstant {options}   {options}
	\setinterfaceconstant {pointset}  {pointset}
	\setinterfaceconstant {purge}     {purge}
\stopinterface

\startinterface all
	\setinterfacevariable {dashed}    {dashed}
	\setinterfacevariable {rounded}   {rounded}
	\setinterfacevariable {butt}      {butt}
	\setinterfacevariable {linejoin}  {linejoin}
	\setinterfacevariable {linecap}   {linecap}
	\setinterfacevariable {linewidth} {linewidth}
	\setinterfacevariable {fontscale} {fontscale}
	\setinterfacevariable {points}    {points}
\stopinterface

%D \stopsubject
%D \startsubject [title=Name space]
%D
%D Use of logical names to easily catch typos.

\installnamespace{gnuplot}
\installnamespace{gnuplotterminal}

%D The \type{ui} variants are used for user-facing macro names and use upper
%D case.

\def\gnuplot@id           {gnuplot}
\def\gnuplot@ui           {GNUPLOT}
\edef\gnuplot@terminal_id {\gnuplot@id terminal}
\edef\gnuplot@terminal_ui {\gnuplot@ui terminal}

%D \macros
%D   {defineGNUPLOTterminal, setupGNUPLOTterminal, setupGNUPLOT}
%D
%D Definition of the macros \type{\setupGNUPLOT},
%D \type{\defineGNUPLOTterminal} and \type{\setupGNUPLOTterminal}.

\installparameterhandler    \????gnuplot         \gnuplot@id
\installsetuphandler        \????gnuplot         \gnuplot@ui

\installparameterhandler    \????gnuplotterminal \gnuplot@terminal_id
\installparametersethandler \????gnuplotterminal \gnuplot@terminal_id
\installdefinehandler       \????gnuplotterminal \gnuplot@terminal_ui \????gnuplotterminal
\installsetuphandler        \????gnuplotterminal \gnuplot@terminal_ui

\appendtoks
	\def\currentgnuplotterminal         {\gnuplotparameter\c!terminal}
	\def\currentgnuplotterminal_terminal{\gnuplotterminalparameter\c!terminal}
	\doif\currentgnuplotterminal\c!tikz {\usemodule[gnuplot-lua-tikz]}
\to\everysetupGNUPLOT

\appendtoks
	\doif\currentgnuplotterminal\c!context{\gnuplot@terminal_value_translation}
\to\everysetupGNUPLOTterminal

%D Some string constants, mostly for the terminals.

\def\c!context   {context}
\def\c!tikz      {tikz}
\def\c!pdf       {pdf}
\def\c!pdfcairo  {pdfcairo}
\def\c!png       {png}
\def\c!pngcairo  {pngcairo}
\def\c!postscript{postscript}

%D \stopsubject
%D \startsubject [title=Externalfilter setup]
%D
%D The \type{externalfilter} module is used as a backend to feed the plot
%D scripts to gnuplot.

\defineexternalfilter
	[\gnuplot@id]
	[\c!filter=\gnuplot@cmd,
	 \c!output=\externalfilterbasefile.\gnuplotterminalparameter\c!suffix,
	 \c!buffer\c!before=gnuplot@inclusions_buffer,
	 \c!readcommand=\gnuplot@read_command,
	 \c!cache=\v!yes]

%D This is the command line which is eventually invoked by the operating
%D system. The parameters are passed to gnuplot to avoid writing an external
%D file.

\starttexdefinition gnuplot@cmd
	gnuplot %%
		-e 'set terminal \gnuplotterminalparameter\c!terminal\space
			size \gnuplotterminalparameter\c!width,\gnuplotterminalparameter\c!height' %%
		-e 'set output "\externalfilteroutputfile"'
\stoptexdefinition

\defineexternalfigure [gnuplot]

%D Gnuplot's output needs to be read back by ConTeXt. The actual command
%D depends on the used terminal.

\starttexdefinition gnuplot@read_command #gnuplotoutput
	
	\pushcatcodetable
	\catcodetable\ctxcatcodes

	\processaction
		[\currentgnuplotterminal]
		[   \c!context=>\ReadFile{#gnuplotoutput},
		       \c!tikz=>\ReadFile{#gnuplotoutput},
		        \c!pdf=>{\externalfigure[#gnuplotoutput][gnuplot]},
		   \c!pdfcairo=>{\externalfigure[#gnuplotoutput][gnuplot]},
		        \c!png=>{\externalfigure[#gnuplotoutput][gnuplot]},
		   \c!pngcairo=>{\externalfigure[#gnuplotoutput][gnuplot]},
		 \c!postscript=>{\externalfigure[#gnuplotoutput][gnuplot]},
		    \s!unknown=>{\externalfigure[#gnuplotoutput][gnuplot]}]
	
	\popcatcodetable
\stoptexdefinition

%D \stopsubject
%D \startsubject [title=Gnuplot inclusions]
%D
%D \macros
%D   {startGNUPLOTinclusions}
%D
%D GNUPLOTinclusions are a buffer which is prepended to all gnuplot scripts by
%D the filter module.

\setvalue{\e!start\gnuplot@ui inclusions}%%
	{\gnuplot@inclusions}

\starttexdefinition gnuplot@inclusions
	\dostartbuffer
		[\gnuplot@id @inclusions_buffer]
		[\e!start\gnuplot@ui inclusions]
		[\e!stop\gnuplot@ui inclusions]
\stoptexdefinition

%D \stopsubject
%D \startsubject [title=\METAPOST\ setup]
%D
%D To prevent interference, an individual MP instance is used.

\defineMPinstance
	[\????gnuplot]
	[\s!format=metafun,
	 \s!initializations=\v!yes,
	 \c!method=\s!double,
	 \c!textstyle=\gnuplotterminalparameter\c!style,
	 \c!textcolor=\gnuplotterminalparameter\c!color]

\definetextext[gp]{\strut}

%D The following definitions are local to the gnuplot \METAPOST\ instance and
%D contain definitions for all gnuplot graphs using the context terminal.

\startMPdefinitions{\????gnuplot}
	if unknown context_gnuplot : input mp-gnuplot.mp ; fi ;
\stopMPdefinitions

%D The following \METAPOST\ assignments are placed within an
%D \type{MPinitializations} environment since \type{MPdefinitions} is read
%D only once and the terminal parameters may change.

\startMPinitializations
	def gp_setup_before =
		gp_num_points_with_tex := 3;
		gp_color_foreground    := \MPcolor{currentcolor};
		gp_color_lt[-2]        := gp_color_foreground;

		linejoin               := \namedgnuplotterminalparameter{context}{linejoin};
		linecap                := \namedgnuplotterminalparameter{context}{linecap};
		gp_use_dashed          := \namedgnuplotterminalparameter{context}{dashed};
		gp_scale_linewidth     := \namedgnuplotterminalparameter{context}{linewidth};
		gp_scale_text          := \namedgnuplotterminalparameter{context}{fontscale};
		gp_points_with         := gp_points_with_\namedgnuplotterminalparameter{context}{points};
	enddef;
\stopMPinitializations

%D \stopsubject
%D \startsubject [title=Terminal setup]
%D
%D The following code is output by gnuplot using the \type{standalone}
%D setting.
%D
%D \starttyping
%D \setupGNUPLOTterminal
%D   [context]
%D   [linejoin=mitered, % *mitered* | rounded | beveled
%D    linecap=butt,     % *butt*    | rounded | squared
%D    dashed=yes,       % *yes*     | no
%D    dashlength=1,     % scaling factor for dash lengths
%D    linewidth=1,      % scaling factor for line widths (1.0 means 0.5bp)
%D    %fontscale=1,     % scaling factor for text labels
%D    points=metapost,  % *metapost* | tex (Should points be drawn with MetaPost or TeX?)
%D    images=inline]    % *inline*   | external (inline only works in MKIV, external requires png support in gnuplot)
%D \stoptyping
%D
%D The Gnuplot manual and the old Gnuplot module documentation both state that
%D \type{linejoin=rounded} was the default value. However, gnuplot actually
%D used \type{linejoin=mitered}. The new behaviour is according to the
%D documentation.

\defineGNUPLOTterminal
	[\c!context]
	[\c!terminal=\c!context,
	 \c!style=,
	 \c!color=,
	 \c!suffix=tex,
	 \c!width=5in,      % *default* (5in) | <dimension>
	 \c!height=3in,     % *default* (3in) | <dimension>
	 linejoin=rounded,  % mitered | *rounded* | beveled
	 linecap=butt,      % *butt*  | rounded (in gnuplot: round) | squared
	 dashed=true,       % *yes*   | no
	 dashlength=1,      % scaling factor for dash lengths
	 linewidth=1,       % scaling factor for line widths (1.0 means 0.4bp)
	 fontscale=1,       % scaling factor for text labels
	 points=metapost,   % *metapost* | tex (Should points be drawn with MetaPost or TeX?)
	 \c!pointset=\????gnuplot:pointset]

\defineGNUPLOTterminal
	[\c!tikz]
	[\c!terminal=\c!tikz\space\c!context\space createstyle,
	 \c!suffix=tex,
	 \c!width=5in,
	 \c!height=3in]

\defineGNUPLOTterminal
	[\c!pdf]
	[\c!terminal=\c!pdf,
	 \c!suffix=\c!pdf,
	 \c!width=5in,
	 \c!height=3in]

\defineGNUPLOTterminal
	[\c!pdfcairo]
	[\c!terminal=\c!pdfcairo,
	 \c!suffix=\c!pdf,
	 \c!width=5in,
	 \c!height=3in]

%D The \type{width} and \type{height} dimensions are given in pixels.

\defineGNUPLOTterminal
	[\c!png]
	[\c!terminal=\c!png,
	 \c!suffix=\c!png,
	 \c!width=640,
	 \c!height=480]

%D The \type{width} and \type{height} dimensions are given in pixels,
%D centimetres or inches.

\defineGNUPLOTterminal
	[\c!pngcairo]
	[\c!terminal=\c!pngcairo,
	 \c!suffix=\c!png,
	 \c!width=640,
	 \c!height=480]


\defineGNUPLOTterminal
	[\c!postscript]
	[\c!terminal=\c!postscript\space enhanced color eps,
	 \c!suffix=ps,
	 \c!width=5in,
	 \c!height=3.5in]

%D \type{currentGNUPLOTpointset} is used in the \METAPOST\ part of this module
%D if the \type{points} option is set to \type{tex}.

\setvalue{current\gnuplot@ui pointset}{\gnuplotterminalparameter\c!pointset}

%D The default point set. It is used if no custom one is provided. A custom
%D pointset can be used as follows.
%D
%D \starttyping
%D \setupGNUPLOTterminal
%D   [context]
%D   [points=tex,
%D    pointset=myset]
%D
%D \defineconversion
%D   [myset]
%D   [-,x,\math{\circ}]
%D \stoptyping

\defineconversion
	[\????gnuplot:pointset]
	[{\scale[scale=800]{\mathematics{+}}},
	 {\scale[scale=800]{\mathematics{\times}}},
	 \mathematics{\ast},
	 {\scale[scale=700]{\mathematics{\square}}},
	 {\scale[scale=700]{\mathematics{\blacksquare}}},
	 \mathematics{\circ},
	 \mathematics{\bullet},
	 {\scale[scale=900]{\mathematics{\triangleup}}},
	 {\scale[scale=900]{\mathematics{\blacktriangle}}},
	 {\scale[scale=900]{\mathematics{\triangledown}}},
	 {\scale[scale=900]{\mathematics{\blacktriangledown}}},
	 {\scale[scale=800]{\mathematics{\lozenge}}},
	 {\scale[scale=800]{\mathematics{\blacklozenge}}}]

%D Gnuplot outputs the strings \type{yes} and \type{no} as values for the
%D \type{dashed} key. But \METAPOST\ expects \type{true} and \type{false}. The
%D following definition takes care of that, as well as translating
%D \type{default} to the corresponding value.

\starttexdefinition gnuplot@terminal_value_translation
	\doifinsetelse{\namedgnuplotterminalparameter\c!context{dashed}}{\v!yes, true}
		{\setgnuplotterminalparameter{dashed}{true}}
		{\setgnuplotterminalparameter{dashed}{false}}

	\doif{\namedgnuplotterminalparameter\c!context\c!width}{default}
		{\setgnuplotterminalparameter\c!width{5in}}

	\doif{\namedgnuplotterminalparameter\c!context\c!height}{default}
		{\setgnuplotterminalparameter\c!height{3in}}
\stoptexdefinition

%D The default terminal is the \type{context} terminal. It is assumed that a
%D recent enough \type{gnuplot} version is used which includes the
%D \type{context} terminal.

\setupGNUPLOT [\c!terminal=\c!context]

%D \stopsubject
%D \startsubject [title=Gnuplot setup]
%D
%D \macros
%D   {startGNUPLOTgraphic}
%D
%D The following definition is the ConTeXt environment output by gnuplot if
%D the context terminal is selected.

\def\startGNUPLOTgraphic[#number]#content\stopGNUPLOTgraphic
	{\startreusableMPgraphic{\????gnuplot ::\gnuplot@current_identifier #number}
	   #content
	 \stopreusableMPgraphic}

%D \stopsubject
%D \startsubject [title=User interface]
%D
%D \macros
%D   {startGNUPLOTscript, useGNUPLOTgraphic}
%D
%D The environment \type{\startGNUPLOTscript} defines a new plot that can be
%D included later with \type{\useGNUPLOTgraphic}. The actual processing takes
%D place when the graphic is used, not when it is defined.

\setvalue{\e!start\gnuplot@ui script}%%
	{\dosingleargument\gnuplot@script_start}

\starttexdefinition gnuplot@script_start [#identifier]
	\grabbufferdata
		[\gnuplot@id #identifier]
		[\e!start\gnuplot@ui script][\e!stop\gnuplot@ui script]
\stoptexdefinition

\setvalue{use\gnuplot@ui graphic}%%
	{\dotripleempty\gnuplot@use_graphic}

%D The second argument is either the number of the graphics to include or a
%D list of graphic numbers. The third argument is a key-value list of options.
%D The second argument can be omitted. In that case the second argument
%D contains the key-value list. Providing just one argument, the identifier,
%D is valid as well.

\starttexdefinition gnuplot@use_graphic [#identifier][#2][#3]
	\ifthirdargument
		\gnuplot@use_graphic_indeed[#identifier][#2][#3]
	\else
		\doifassignmentelse{#2}
			{\gnuplot@use_graphic_indeed[#identifier][][#2]}
			{\gnuplot@use_graphic_indeed[#identifier][#2][]}
	\fi
\stoptexdefinition

\starttexdefinition gnuplot@use_graphic_indeed [#identifier][#num][#options]
	\begingroup
	
	\pushcatcodetable
	\catcodetable\ctxcatcodes

	\edef\gnuplot@current_identifier{#identifier}

	\setupGNUPLOTterminal[\currentgnuplotterminal][#options]
	
	%% If this macro is defined, the graphic was generated with
	%% \processGNUPLOTfile and only needs to be read and not processed.

	\doifdefinedelse{gnuplot@process_file_#identifier}
		{\getvalue{gnuplot@process_file_#identifier}}
		{\processgnuplotbuffer[\gnuplot@id #identifier]}

	\doif\currentgnuplotterminal_terminal\c!context{
		\doifsomethingelse{#num}
			{\reuseMPgraphic{\????gnuplot::\gnuplot@current_identifier #num}}
			{\doloop
				{\doifMPgraphicelse{\????gnuplot::\gnuplot@current_identifier \recurselevel}
				{\reuseMPgraphic{\????gnuplot::\gnuplot@current_identifier \recurselevel}}
				{\exitloop}}}}
	
	\popcatcodetable
	\endgroup
\stoptexdefinition

%D \macros
%D   {startGNUPLOTfile}
%D
%D \type{startGNUPLOTfile} takes an identifier and a file name. The file is
%D the output file created by gnuplot when the context terminal is used.
%D gnuplot must be run manually in this case.

\setvalue{process\gnuplot@ui file}%%
	{\dodoubleempty\gnuplot@process_file}

\starttexdefinition gnuplot@process_file [#identifier][#gnuplotoutput]
	\edef\gnuplot@current_identifier{#identifier}
	\setvalue{gnuplot@process_file_#identifier}{\ReadFile{#gnuplotoutput}}
\stoptexdefinition

%D \macros
%D   {startGNUPLOT}
%D
%D \type{\startGNUPLOT} is an environment that takes a plot script and
%D directly places the graph, similar to \type{\startMPcode}.

\newcounter\gnuplot@c_inline_graphic

\setvalue{\e!start\gnuplot@ui}%%
	{\dosingleempty\gnuplot@inline_graphic}

\starttexdefinition gnuplot@inline_graphic [#options]
	\increment\gnuplot@c_inline_graphic
	\edef\gnuplot@current_identifier{\gnuplot@c_inline_graphic}
	\edef\gnuplot@inline_options{#options}

	\grabbufferdata
		[\gnuplot@id \gnuplot@current_identifier]
		[\e!start\gnuplot@ui][\e!stop\gnuplot@ui]
\stoptexdefinition

\setvalue{\e!stop\gnuplot@ui}%%
	{\expanded{\gnuplot@use_graphic_indeed[\gnuplot@current_identifier][][\gnuplot@inline_options]}}

\protect
\stopmodule

